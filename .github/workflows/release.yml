name: Release

# Run on every commit tag which begins with "v" (e.g., "v0.1.4")
on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: 'Build Toolkit'
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Build
        run: |
          npm ci
          npm run build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: |
            LICENSE
            README.md
            package.json
            package-lock.json
            install.bat
            start.bat
            riot-api-key.bat
            auth.bat
            dist
            !dist/*.ts
            !dist/utils
            !dist/utils/*
  build-docker:
    name: 'Build Toolkit for Docker'
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  create-zip:
    name: 'Create Zip File'
    needs: [build]
    runs-on: 'ubuntu-latest'
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: build

      - run: mkdir modules

      - name: Create Zip
        run: zip -r prod-toolkit.zip LICENSE README.md package.json package-lock.json install.bat start.bat riot-api-key.bat auth.bat scripts/* dist/* modules

      - name: Upload Zip
        uses: actions/upload-artifact@v3
        with:
          name: prod-toolkit
          path: prod-toolkit.zip

  release:
    name: 'Release'
    needs: [create-zip]
    runs-on: 'ubuntu-latest'
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download zip
        uses: actions/download-artifact@v3
        with:
          name: prod-toolkit

      - uses: 'marvinpinto/action-automatic-releases@latest'
        with:
          repo_token: '${{ secrets.GITHUB_TOKEN }}'
          prerelease: false
          files: |
            prod-toolkit.zip
